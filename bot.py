import telebot
from telebot import types
from info import *

token = "token"
bot = telebot.TeleBot(token)


def response_start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
    markup.add(
        types.KeyboardButton("üìá –í–∏–∑–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞"),
        types.KeyboardButton("üì∑ –§–æ—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    )

    bot.send_message(message.chat.id,
                     text = f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, —è –±–æ—Ç-–≤–∏–∑–∏—Ç–∫–∞, –∏ —è –º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"
                            f"–Ω–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —è –º–æ–≥—É",
                     reply_markup = markup
                     )


def response_help(message):
    bot.send_message(message.chat.id,
                     parse_mode = "MarkdownV2",
                     text = "–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n\n" +
                            commands_to_string()
                     )


def response_about(message):
    bot.send_message(message.chat.id,
                     parse_mode = "MarkdownV2",
                     text = "_–í–∏–∑–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞_\n\n" +
                            hobbies_to_string()
                     )

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–î–∞", callback_data = '—Ñ–æ—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'),
        types.InlineKeyboardButton("–ù–µ—Ç", callback_data = '–Ω–µ—Ç, —Å–ø–∞—Å–∏–±–æ')
    )

    bot.send_message(message.chat.id,
                     text = "–ñ–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?",
                     reply_markup = markup
                     )


def response_photo(message):
    bot.send_photo(message.chat.id,
                   caption = "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
                   photo = get_photo()
                   )

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–î–∞", callback_data = '–≤–∏–∑–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞'),
        types.InlineKeyboardButton("–ù–µ—Ç", callback_data = '–Ω–µ—Ç, —Å–ø–∞—Å–∏–±–æ')
    )

    bot.send_message(message.chat.id,
                     text = "–ñ–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤–∏–∑–∏—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?",
                     reply_markup = markup
                     )


def response_finish(message):
    bot.send_message(message.chat.id,
                     text = "–•–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è üôÉ"
                     )


commands = [
    {
        'command': '/start',
        'description': '–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã',
        'keywords': ['—Å—Ç–∞—Ä—Ç'],
        'handler': response_start
    },
    {
        'command': '/help',
        'description': '–ø–µ—Ä–µ—á–µ–Ω—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–º–∞–Ω–¥',
        'keywords': ['–ø–æ–º–æ–≥–∏ –º–Ω–µ'],
        'handler': response_help
    },
    {
        'command': '/about',
        'description': '–≤–∏–∑–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞',
        'keywords': ['–≤–∏–∑–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞', '–≤–∏–∑–∏—Ç–∫–∞', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'],
        'handler': response_about
    },
    {
        'command': '/photo',
        'description': '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞',
        'keywords': ['—Ñ–æ—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', '—Ñ–æ—Ç–æ'],
        'handler': response_photo
    },
    {
        'command': None,
        'description': None,
        'keywords': ['–Ω–µ—Ç, —Å–ø–∞—Å–∏–±–æ', '—Å–ø–∞—Å–∏–±–æ'],
        'handler': response_finish
    }
]


def commands_to_string():
    result = ''
    for command in commands:
        if command['command'] and command['description']:
            result += f"*{command['command']}* \- {command['description']}\n"
    return result


def process_message(message, text):
    for command in commands:
        handler = None
        if command['command'] == text.lower():
            handler = command['handler']
        else:
            keywords = command['keywords']
            for keyword in keywords:
                if keyword in text.lower():
                    handler = command['handler']
        if handler:
            handler(message)


@bot.message_handler(content_types = ['text'])
def text_message(message):
    process_message(message, message.text)


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    process_message(call.message, call.data)
    bot.answer_callback_query(call.id)


menu_commands = []
for command in commands:
    if command['command'] and command['description']:
        menu_commands.append(telebot.types.BotCommand(command['command'], command['description']))
bot.set_my_commands(menu_commands)
bot.polling(non_stop = True)
